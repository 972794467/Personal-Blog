1. 避免Select * 
   原因
   （1）会造成覆盖索引失效  （覆盖索引是select的数据列只用从索引中就能够取得，不必读取数据行）
   （2）表结构变化时无法控制提取的列
   
2. 避免子查询
    原因
    （1）mysql对子查询的优化很差，最差的就是where子句中使用IN
    （2）select name from table1 where id in (select id from table2 where uid = 111)   //id 和 uid 都有索引 
         我们希望的结果是进行子查询，取出id列表，然后使用in列表在表中查询，但实际上是一条一条取出然后判断是否exist ，导致全表扫描
    （3）可以改用联接的方式
          select name from table1,table2 where table1.id=table2.id and table2.uid=111;
          
3.避免使用or
    原因
    （1）mysql在单个索引不能完全满足where条件中的所有限制的时候，通常会进行全表扫描。如：
         select * from tb11 where id=1 or name='a';
         tb11表中，id和name分别有索引，但是该语句没法用到任何一个索引，mysql会进行全表扫描
    （2）优化的方法是使用如下语句：
          select * from tb11 where id=1 union all select * from tb11 where name='a' and id!=1;
          索引区分度较好时，这种优化的效率较高。但当索引区分度不高时，会导致并行扫描行数过多，所以这种优化需要进行测试。
          
 4.联接优化
     确保ON或USING使用的列上有索引
     确保group by或order by只引用一个表中的列

5.优化联合
     Mysql执行union的方式都是通过创建并填充临时表的方式进行，它不能对union进行太多优化。Mysql总是把结果集放到临时表中，然后再读取出来。
     尽可能使用union all而不是union，union会去重，会想临时表添加distinct选项，这个操作开销很大。
     
6.批量的写操作
     影响是:锁表行数多,执行时间长. 因为锁定的行数偏多,会阻塞其它的写操作,导致它们行锁等待超时，导致集群主从延迟
     优化方案就是避免大批量的读取和写入,分chunk读取和写入,中间sleep,避免大批量的锁定数据行,降低单个SQL的执行时间,从而降低整体的影响。
     表设计层面,我们一般建议使用自增ID做PRIMARY KEY,业务主键做UNIQUE KEY,原因如下:
       1.如果业务主键做PRIMARY KEY,业务主键的插入顺序比较随机,这样会导致插入时间偏长,而且聚簇索引叶节点分裂严重,导致碎片严重,浪费空间;而自增ID做PRIMARY KEY的情况下,顺序插入,插入快,而且聚簇索引比较紧凑,空间浪费小。
       2.一般表设计上除了PRIMARY KEY外,还会有几个索引用来优化读写.而这些非PK索引叶节点中都要存储PRIMARY KEY,以指向数据行,从而关联非索引中的字段内容.这样自增ID（定义为bigint才占用8个字节）和业务主键(通常字符串,
       多字段,空间占用大)相比,做PRIMARY KEY在索引空间层面的优势也是很明显的(同时也会转换为时间成本层面的优势),表定义中的索引越多,这种优势越明显。
     （1） update delete 等操作，如果where里条件（非主键索引）扫描行数很多，可能不会使用索引，此时会全表加行锁，阻塞该表后续的所有DML语句，建议最终转化为ID进行删除
     （2）实际操作(更新/删除)的数据行数很大.这种情况,必须分chunk进行操作
     
     
